/**
 * Copyright (c) 2016, Regents of the University of California and
 * contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
buildscript {
    repositories {
        mavenLocal()
        // If using a Maven proxy, put the property settings in
        // ~/.gradle/gradle.properties for default_proxy_url,
        // default_proxy_username and default_proxy_password.
        if (project.hasProperty("default_proxy_url")) {
            maven {
                url project.property("default_proxy_url")
                credentials {
                    username project.property("default_proxy_username")
                    password project.property("default_proxy_password")
                }
            }
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:${spring_depmgmt_version}"
        classpath "org.grails:grails-gradle-plugin:${grails_gradle_version}"
    }
}

apply plugin: 'grails'
apply plugin: 'project-report'
apply plugin: "io.spring.dependency-management"
apply plugin: 'maven-publish'
//apply plugin: 'com.jfrog.bintray'

group = 'edu.berkeley.calnet.grails.plugins'
version = '1.0-SNAPSHOT' // !!! Change in ExternalGroovyGrailsPlugin.groovy too

sourceCompatibility = 1.7
targetCompatibility = 1.7

grails {
    grailsVersion = '2.5.4'
    groovyVersion = '2.4.4'
}

repositories {
    mavenLocal()
    // If using a Maven proxy, put the property settings in
    // ~/.gradle/gradle.properties for default_proxy_url,
    // default_proxy_username and default_proxy_password.
    if (project.hasProperty("default_proxy_url")) {
        maven {
            url project.property("default_proxy_url")
            credentials {
                username project.property("default_proxy_username")
                password project.property("default_proxy_password")
            }
        }
    }
    jcenter()
    grails.central()
    mavenCentral()
}

test {
    // We'd like memory to be low for the tests so we can trigger GC for
    // class unloading checking
    jvmOptions {
        maxHeapSize = "92m"
    }
}

dependencyManagement {
    imports {
        mavenBom "edu.berkeley.calnet:gradle-grails-bom:${grails.grailsVersion}"
    }
}

dependencies {
    /*****************************************************************
     * BEGIN STANDARD GRAILS DEPENDENCIES FROM gradle-grails-bom
     *****************************************************************/
    provided 'javax.servlet:javax.servlet-api'

    runtime('org.grails.plugins:hibernate4') {
        exclude module: 'xml-apis'
    }

    test 'junit:junit'
    test 'org.spockframework:spock-core'
    /*****************************************************************
     * END STANDARD GRAILS DEPENDENCIES FROM gradle-grails-bom
     *****************************************************************/
}

publishing {
    publications {
        maven(MavenPublication) {
        }
    }
}

/*
if (project.hasProperty('default_bintray_user')) {
    bintray {
        // put in ~/.gradle/gradle.properties
        user = project.property('default_bintray_user')
        key = project.property('default_bintray_api_key')
        publications = ['mavenJava']

        //dryRun = true

        pkg {
            repo = 'maven'
            name = 'grails-external-groovy-plugin'
            desc = 'Run external Groovy scripts from Grails'
            licenses = ['BSD']
            vcsUrl = 'https://github.com/calnet-oss/grails-external-groovy-plugin'
            issueTrackerUrl = 'https://github.com/calnet-oss/grails-external-groovy-plugin/issues'
            version {
                name = project.version
                desc = "$name v${project.version}- $desc"
                released = new Date()
            }
        }
    }
}
*/
